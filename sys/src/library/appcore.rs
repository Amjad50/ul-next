/* automatically generated by rust-bindgen 0.70.1 */

use crate::defines::*;

#[derive(Clone)]
pub struct AppCore {
    #[cfg(feature = "loaded")]
    __library: Option<::std::sync::Arc<::libloading::Library>>,
    pub ulCreateSettings: unsafe extern "C" fn() -> ULSettings,
    pub ulDestroySettings: unsafe extern "C" fn(settings: ULSettings),
    pub ulSettingsSetDeveloperName: unsafe extern "C" fn(settings: ULSettings, name: ULString),
    pub ulSettingsSetAppName: unsafe extern "C" fn(settings: ULSettings, name: ULString),
    pub ulSettingsSetFileSystemPath: unsafe extern "C" fn(settings: ULSettings, path: ULString),
    pub ulSettingsSetLoadShadersFromFileSystem:
        unsafe extern "C" fn(settings: ULSettings, enabled: bool),
    pub ulSettingsSetForceCPURenderer: unsafe extern "C" fn(settings: ULSettings, force_cpu: bool),
    pub ulCreateApp: unsafe extern "C" fn(settings: ULSettings, config: ULConfig) -> ULApp,
    pub ulDestroyApp: unsafe extern "C" fn(app: ULApp),
    pub ulAppSetUpdateCallback: unsafe extern "C" fn(
        app: ULApp,
        callback: ULUpdateCallback,
        user_data: *mut ::std::os::raw::c_void,
    ),
    pub ulAppIsRunning: unsafe extern "C" fn(app: ULApp) -> bool,
    pub ulAppGetMainMonitor: unsafe extern "C" fn(app: ULApp) -> ULMonitor,
    pub ulAppGetRenderer: unsafe extern "C" fn(app: ULApp) -> ULRenderer,
    pub ulAppRun: unsafe extern "C" fn(app: ULApp),
    pub ulAppQuit: unsafe extern "C" fn(app: ULApp),
    pub ulMonitorGetScale: unsafe extern "C" fn(monitor: ULMonitor) -> f64,
    pub ulMonitorGetWidth: unsafe extern "C" fn(monitor: ULMonitor) -> ::std::os::raw::c_uint,
    pub ulMonitorGetHeight: unsafe extern "C" fn(monitor: ULMonitor) -> ::std::os::raw::c_uint,
    pub ulCreateWindow: unsafe extern "C" fn(
        monitor: ULMonitor,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        fullscreen: bool,
        window_flags: ::std::os::raw::c_uint,
    ) -> ULWindow,
    pub ulDestroyWindow: unsafe extern "C" fn(window: ULWindow),
    pub ulWindowSetCloseCallback: unsafe extern "C" fn(
        window: ULWindow,
        callback: ULCloseCallback,
        user_data: *mut ::std::os::raw::c_void,
    ),
    pub ulWindowSetResizeCallback: unsafe extern "C" fn(
        window: ULWindow,
        callback: ULResizeCallback,
        user_data: *mut ::std::os::raw::c_void,
    ),
    pub ulWindowGetScreenWidth: unsafe extern "C" fn(window: ULWindow) -> ::std::os::raw::c_uint,
    pub ulWindowGetWidth: unsafe extern "C" fn(window: ULWindow) -> ::std::os::raw::c_uint,
    pub ulWindowGetScreenHeight: unsafe extern "C" fn(window: ULWindow) -> ::std::os::raw::c_uint,
    pub ulWindowGetHeight: unsafe extern "C" fn(window: ULWindow) -> ::std::os::raw::c_uint,
    pub ulWindowMoveTo:
        unsafe extern "C" fn(window: ULWindow, x: ::std::os::raw::c_int, y: ::std::os::raw::c_int),
    pub ulWindowMoveToCenter: unsafe extern "C" fn(arg1: ULWindow),
    pub ulWindowGetPositionX: unsafe extern "C" fn(window: ULWindow) -> ::std::os::raw::c_int,
    pub ulWindowGetPositionY: unsafe extern "C" fn(window: ULWindow) -> ::std::os::raw::c_int,
    pub ulWindowIsFullscreen: unsafe extern "C" fn(window: ULWindow) -> bool,
    pub ulWindowGetScale: unsafe extern "C" fn(window: ULWindow) -> f64,
    pub ulWindowSetTitle:
        unsafe extern "C" fn(window: ULWindow, title: *const ::std::os::raw::c_char),
    pub ulWindowSetCursor: unsafe extern "C" fn(window: ULWindow, cursor: ULCursor),
    pub ulWindowShow: unsafe extern "C" fn(window: ULWindow),
    pub ulWindowHide: unsafe extern "C" fn(window: ULWindow),
    pub ulWindowIsVisible: unsafe extern "C" fn(window: ULWindow) -> bool,
    pub ulWindowClose: unsafe extern "C" fn(window: ULWindow),
    pub ulWindowScreenToPixels:
        unsafe extern "C" fn(window: ULWindow, val: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    pub ulWindowPixelsToScreen:
        unsafe extern "C" fn(window: ULWindow, val: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    pub ulWindowGetNativeHandle:
        unsafe extern "C" fn(window: ULWindow) -> *mut ::std::os::raw::c_void,
    pub ulCreateOverlay: unsafe extern "C" fn(
        window: ULWindow,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> ULOverlay,
    pub ulCreateOverlayWithView: unsafe extern "C" fn(
        window: ULWindow,
        view: ULView,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> ULOverlay,
    pub ulDestroyOverlay: unsafe extern "C" fn(overlay: ULOverlay),
    pub ulOverlayGetView: unsafe extern "C" fn(overlay: ULOverlay) -> ULView,
    pub ulOverlayGetWidth: unsafe extern "C" fn(overlay: ULOverlay) -> ::std::os::raw::c_uint,
    pub ulOverlayGetHeight: unsafe extern "C" fn(overlay: ULOverlay) -> ::std::os::raw::c_uint,
    pub ulOverlayGetX: unsafe extern "C" fn(overlay: ULOverlay) -> ::std::os::raw::c_int,
    pub ulOverlayGetY: unsafe extern "C" fn(overlay: ULOverlay) -> ::std::os::raw::c_int,
    pub ulOverlayMoveTo: unsafe extern "C" fn(
        overlay: ULOverlay,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ),
    pub ulOverlayResize: unsafe extern "C" fn(
        overlay: ULOverlay,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    ),
    pub ulOverlayIsHidden: unsafe extern "C" fn(overlay: ULOverlay) -> bool,
    pub ulOverlayHide: unsafe extern "C" fn(overlay: ULOverlay),
    pub ulOverlayShow: unsafe extern "C" fn(overlay: ULOverlay),
    pub ulOverlayHasFocus: unsafe extern "C" fn(overlay: ULOverlay) -> bool,
    pub ulOverlayFocus: unsafe extern "C" fn(overlay: ULOverlay),
    pub ulOverlayUnfocus: unsafe extern "C" fn(overlay: ULOverlay),
    pub ulEnablePlatformFontLoader: unsafe extern "C" fn(),
    pub ulEnablePlatformFileSystem: unsafe extern "C" fn(base_dir: ULString),
    pub ulEnableDefaultLogger: unsafe extern "C" fn(log_path: ULString),
}
impl AppCore {
    #[cfg(feature = "appcore_linked")]
    #[cfg_attr(docsrs, doc(cfg(feature = "appcore_linked")))]
    pub const fn linked() -> Self {
        Self {
            #[cfg(feature = "loaded")]
            __library: None,
            ulCreateSettings: crate::linked::ulCreateSettings,
            ulDestroySettings: crate::linked::ulDestroySettings,
            ulSettingsSetDeveloperName: crate::linked::ulSettingsSetDeveloperName,
            ulSettingsSetAppName: crate::linked::ulSettingsSetAppName,
            ulSettingsSetFileSystemPath: crate::linked::ulSettingsSetFileSystemPath,
            ulSettingsSetLoadShadersFromFileSystem:
                crate::linked::ulSettingsSetLoadShadersFromFileSystem,
            ulSettingsSetForceCPURenderer: crate::linked::ulSettingsSetForceCPURenderer,
            ulCreateApp: crate::linked::ulCreateApp,
            ulDestroyApp: crate::linked::ulDestroyApp,
            ulAppSetUpdateCallback: crate::linked::ulAppSetUpdateCallback,
            ulAppIsRunning: crate::linked::ulAppIsRunning,
            ulAppGetMainMonitor: crate::linked::ulAppGetMainMonitor,
            ulAppGetRenderer: crate::linked::ulAppGetRenderer,
            ulAppRun: crate::linked::ulAppRun,
            ulAppQuit: crate::linked::ulAppQuit,
            ulMonitorGetScale: crate::linked::ulMonitorGetScale,
            ulMonitorGetWidth: crate::linked::ulMonitorGetWidth,
            ulMonitorGetHeight: crate::linked::ulMonitorGetHeight,
            ulCreateWindow: crate::linked::ulCreateWindow,
            ulDestroyWindow: crate::linked::ulDestroyWindow,
            ulWindowSetCloseCallback: crate::linked::ulWindowSetCloseCallback,
            ulWindowSetResizeCallback: crate::linked::ulWindowSetResizeCallback,
            ulWindowGetScreenWidth: crate::linked::ulWindowGetScreenWidth,
            ulWindowGetWidth: crate::linked::ulWindowGetWidth,
            ulWindowGetScreenHeight: crate::linked::ulWindowGetScreenHeight,
            ulWindowGetHeight: crate::linked::ulWindowGetHeight,
            ulWindowMoveTo: crate::linked::ulWindowMoveTo,
            ulWindowMoveToCenter: crate::linked::ulWindowMoveToCenter,
            ulWindowGetPositionX: crate::linked::ulWindowGetPositionX,
            ulWindowGetPositionY: crate::linked::ulWindowGetPositionY,
            ulWindowIsFullscreen: crate::linked::ulWindowIsFullscreen,
            ulWindowGetScale: crate::linked::ulWindowGetScale,
            ulWindowSetTitle: crate::linked::ulWindowSetTitle,
            ulWindowSetCursor: crate::linked::ulWindowSetCursor,
            ulWindowShow: crate::linked::ulWindowShow,
            ulWindowHide: crate::linked::ulWindowHide,
            ulWindowIsVisible: crate::linked::ulWindowIsVisible,
            ulWindowClose: crate::linked::ulWindowClose,
            ulWindowScreenToPixels: crate::linked::ulWindowScreenToPixels,
            ulWindowPixelsToScreen: crate::linked::ulWindowPixelsToScreen,
            ulWindowGetNativeHandle: crate::linked::ulWindowGetNativeHandle,
            ulCreateOverlay: crate::linked::ulCreateOverlay,
            ulCreateOverlayWithView: crate::linked::ulCreateOverlayWithView,
            ulDestroyOverlay: crate::linked::ulDestroyOverlay,
            ulOverlayGetView: crate::linked::ulOverlayGetView,
            ulOverlayGetWidth: crate::linked::ulOverlayGetWidth,
            ulOverlayGetHeight: crate::linked::ulOverlayGetHeight,
            ulOverlayGetX: crate::linked::ulOverlayGetX,
            ulOverlayGetY: crate::linked::ulOverlayGetY,
            ulOverlayMoveTo: crate::linked::ulOverlayMoveTo,
            ulOverlayResize: crate::linked::ulOverlayResize,
            ulOverlayIsHidden: crate::linked::ulOverlayIsHidden,
            ulOverlayHide: crate::linked::ulOverlayHide,
            ulOverlayShow: crate::linked::ulOverlayShow,
            ulOverlayHasFocus: crate::linked::ulOverlayHasFocus,
            ulOverlayFocus: crate::linked::ulOverlayFocus,
            ulOverlayUnfocus: crate::linked::ulOverlayUnfocus,
            ulEnablePlatformFontLoader: crate::linked::ulEnablePlatformFontLoader,
            ulEnablePlatformFileSystem: crate::linked::ulEnablePlatformFileSystem,
            ulEnableDefaultLogger: crate::linked::ulEnableDefaultLogger,
        }
    }

    #[cfg(feature = "loaded")]
    #[cfg_attr(docsrs, doc(cfg(feature = "loaded")))]
    pub unsafe fn load_from<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }

    #[cfg(feature = "loaded")]
    #[cfg_attr(docsrs, doc(cfg(feature = "loaded")))]
    unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let ulCreateSettings = __library.get(b"ulCreateSettings\0").map(|sym| *sym)?;
        let ulDestroySettings = __library.get(b"ulDestroySettings\0").map(|sym| *sym)?;
        let ulSettingsSetDeveloperName = __library
            .get(b"ulSettingsSetDeveloperName\0")
            .map(|sym| *sym)?;
        let ulSettingsSetAppName = __library.get(b"ulSettingsSetAppName\0").map(|sym| *sym)?;
        let ulSettingsSetFileSystemPath = __library
            .get(b"ulSettingsSetFileSystemPath\0")
            .map(|sym| *sym)?;
        let ulSettingsSetLoadShadersFromFileSystem = __library
            .get(b"ulSettingsSetLoadShadersFromFileSystem\0")
            .map(|sym| *sym)?;
        let ulSettingsSetForceCPURenderer = __library
            .get(b"ulSettingsSetForceCPURenderer\0")
            .map(|sym| *sym)?;
        let ulCreateApp = __library.get(b"ulCreateApp\0").map(|sym| *sym)?;
        let ulDestroyApp = __library.get(b"ulDestroyApp\0").map(|sym| *sym)?;
        let ulAppSetUpdateCallback = __library.get(b"ulAppSetUpdateCallback\0").map(|sym| *sym)?;
        let ulAppIsRunning = __library.get(b"ulAppIsRunning\0").map(|sym| *sym)?;
        let ulAppGetMainMonitor = __library.get(b"ulAppGetMainMonitor\0").map(|sym| *sym)?;
        let ulAppGetRenderer = __library.get(b"ulAppGetRenderer\0").map(|sym| *sym)?;
        let ulAppRun = __library.get(b"ulAppRun\0").map(|sym| *sym)?;
        let ulAppQuit = __library.get(b"ulAppQuit\0").map(|sym| *sym)?;
        let ulMonitorGetScale = __library.get(b"ulMonitorGetScale\0").map(|sym| *sym)?;
        let ulMonitorGetWidth = __library.get(b"ulMonitorGetWidth\0").map(|sym| *sym)?;
        let ulMonitorGetHeight = __library.get(b"ulMonitorGetHeight\0").map(|sym| *sym)?;
        let ulCreateWindow = __library.get(b"ulCreateWindow\0").map(|sym| *sym)?;
        let ulDestroyWindow = __library.get(b"ulDestroyWindow\0").map(|sym| *sym)?;
        let ulWindowSetCloseCallback = __library
            .get(b"ulWindowSetCloseCallback\0")
            .map(|sym| *sym)?;
        let ulWindowSetResizeCallback = __library
            .get(b"ulWindowSetResizeCallback\0")
            .map(|sym| *sym)?;
        let ulWindowGetScreenWidth = __library.get(b"ulWindowGetScreenWidth\0").map(|sym| *sym)?;
        let ulWindowGetWidth = __library.get(b"ulWindowGetWidth\0").map(|sym| *sym)?;
        let ulWindowGetScreenHeight = __library
            .get(b"ulWindowGetScreenHeight\0")
            .map(|sym| *sym)?;
        let ulWindowGetHeight = __library.get(b"ulWindowGetHeight\0").map(|sym| *sym)?;
        let ulWindowMoveTo = __library.get(b"ulWindowMoveTo\0").map(|sym| *sym)?;
        let ulWindowMoveToCenter = __library.get(b"ulWindowMoveToCenter\0").map(|sym| *sym)?;
        let ulWindowGetPositionX = __library.get(b"ulWindowGetPositionX\0").map(|sym| *sym)?;
        let ulWindowGetPositionY = __library.get(b"ulWindowGetPositionY\0").map(|sym| *sym)?;
        let ulWindowIsFullscreen = __library.get(b"ulWindowIsFullscreen\0").map(|sym| *sym)?;
        let ulWindowGetScale = __library.get(b"ulWindowGetScale\0").map(|sym| *sym)?;
        let ulWindowSetTitle = __library.get(b"ulWindowSetTitle\0").map(|sym| *sym)?;
        let ulWindowSetCursor = __library.get(b"ulWindowSetCursor\0").map(|sym| *sym)?;
        let ulWindowShow = __library.get(b"ulWindowShow\0").map(|sym| *sym)?;
        let ulWindowHide = __library.get(b"ulWindowHide\0").map(|sym| *sym)?;
        let ulWindowIsVisible = __library.get(b"ulWindowIsVisible\0").map(|sym| *sym)?;
        let ulWindowClose = __library.get(b"ulWindowClose\0").map(|sym| *sym)?;
        let ulWindowScreenToPixels = __library.get(b"ulWindowScreenToPixels\0").map(|sym| *sym)?;
        let ulWindowPixelsToScreen = __library.get(b"ulWindowPixelsToScreen\0").map(|sym| *sym)?;
        let ulWindowGetNativeHandle = __library
            .get(b"ulWindowGetNativeHandle\0")
            .map(|sym| *sym)?;
        let ulCreateOverlay = __library.get(b"ulCreateOverlay\0").map(|sym| *sym)?;
        let ulCreateOverlayWithView = __library
            .get(b"ulCreateOverlayWithView\0")
            .map(|sym| *sym)?;
        let ulDestroyOverlay = __library.get(b"ulDestroyOverlay\0").map(|sym| *sym)?;
        let ulOverlayGetView = __library.get(b"ulOverlayGetView\0").map(|sym| *sym)?;
        let ulOverlayGetWidth = __library.get(b"ulOverlayGetWidth\0").map(|sym| *sym)?;
        let ulOverlayGetHeight = __library.get(b"ulOverlayGetHeight\0").map(|sym| *sym)?;
        let ulOverlayGetX = __library.get(b"ulOverlayGetX\0").map(|sym| *sym)?;
        let ulOverlayGetY = __library.get(b"ulOverlayGetY\0").map(|sym| *sym)?;
        let ulOverlayMoveTo = __library.get(b"ulOverlayMoveTo\0").map(|sym| *sym)?;
        let ulOverlayResize = __library.get(b"ulOverlayResize\0").map(|sym| *sym)?;
        let ulOverlayIsHidden = __library.get(b"ulOverlayIsHidden\0").map(|sym| *sym)?;
        let ulOverlayHide = __library.get(b"ulOverlayHide\0").map(|sym| *sym)?;
        let ulOverlayShow = __library.get(b"ulOverlayShow\0").map(|sym| *sym)?;
        let ulOverlayHasFocus = __library.get(b"ulOverlayHasFocus\0").map(|sym| *sym)?;
        let ulOverlayFocus = __library.get(b"ulOverlayFocus\0").map(|sym| *sym)?;
        let ulOverlayUnfocus = __library.get(b"ulOverlayUnfocus\0").map(|sym| *sym)?;
        let ulEnablePlatformFontLoader = __library
            .get(b"ulEnablePlatformFontLoader\0")
            .map(|sym| *sym)?;
        let ulEnablePlatformFileSystem = __library
            .get(b"ulEnablePlatformFileSystem\0")
            .map(|sym| *sym)?;
        let ulEnableDefaultLogger = __library.get(b"ulEnableDefaultLogger\0").map(|sym| *sym)?;
        Ok(AppCore {
            __library: Some(::std::sync::Arc::new(__library)),
            ulCreateSettings,
            ulDestroySettings,
            ulSettingsSetDeveloperName,
            ulSettingsSetAppName,
            ulSettingsSetFileSystemPath,
            ulSettingsSetLoadShadersFromFileSystem,
            ulSettingsSetForceCPURenderer,
            ulCreateApp,
            ulDestroyApp,
            ulAppSetUpdateCallback,
            ulAppIsRunning,
            ulAppGetMainMonitor,
            ulAppGetRenderer,
            ulAppRun,
            ulAppQuit,
            ulMonitorGetScale,
            ulMonitorGetWidth,
            ulMonitorGetHeight,
            ulCreateWindow,
            ulDestroyWindow,
            ulWindowSetCloseCallback,
            ulWindowSetResizeCallback,
            ulWindowGetScreenWidth,
            ulWindowGetWidth,
            ulWindowGetScreenHeight,
            ulWindowGetHeight,
            ulWindowMoveTo,
            ulWindowMoveToCenter,
            ulWindowGetPositionX,
            ulWindowGetPositionY,
            ulWindowIsFullscreen,
            ulWindowGetScale,
            ulWindowSetTitle,
            ulWindowSetCursor,
            ulWindowShow,
            ulWindowHide,
            ulWindowIsVisible,
            ulWindowClose,
            ulWindowScreenToPixels,
            ulWindowPixelsToScreen,
            ulWindowGetNativeHandle,
            ulCreateOverlay,
            ulCreateOverlayWithView,
            ulDestroyOverlay,
            ulOverlayGetView,
            ulOverlayGetWidth,
            ulOverlayGetHeight,
            ulOverlayGetX,
            ulOverlayGetY,
            ulOverlayMoveTo,
            ulOverlayResize,
            ulOverlayIsHidden,
            ulOverlayHide,
            ulOverlayShow,
            ulOverlayHasFocus,
            ulOverlayFocus,
            ulOverlayUnfocus,
            ulEnablePlatformFontLoader,
            ulEnablePlatformFileSystem,
            ulEnableDefaultLogger,
        })
    }
    #[doc = "\n Create settings with default values (see <AppCore/App.h>).\n"]
    pub unsafe fn ulCreateSettings(&self) -> ULSettings {
        (self.ulCreateSettings)()
    }
    #[doc = "\n Destroy settings.\n"]
    pub unsafe fn ulDestroySettings(&self, settings: ULSettings) {
        (self.ulDestroySettings)(settings)
    }
    #[doc = "\n Set the name of the developer of this app.\n\n This is used to generate a unique path to store local application data\n on the user's machine.\n\n Default is \"MyCompany\"\n"]
    pub unsafe fn ulSettingsSetDeveloperName(&self, settings: ULSettings, name: ULString) {
        (self.ulSettingsSetDeveloperName)(settings, name)
    }
    #[doc = "\n Set the name of this app.\n\n This is used to generate a unique path to store local application data\n on the user's machine.\n\n Default is \"MyApp\"\n"]
    pub unsafe fn ulSettingsSetAppName(&self, settings: ULSettings, name: ULString) {
        (self.ulSettingsSetAppName)(settings, name)
    }
    #[doc = "\n Set the root file path for our file system, you should set this to the\n relative path where all of your app data is.\n\n This will be used to resolve all file URLs, eg file:///page.html\n\n @note  The default path is \"./assets/\"\n\n        This relative path is resolved using the following logic:\n         - Windows: relative to the executable path\n         - Linux:   relative to the executable path\n         - macOS:   relative to YourApp.app/Contents/Resources/\n"]
    pub unsafe fn ulSettingsSetFileSystemPath(&self, settings: ULSettings, path: ULString) {
        (self.ulSettingsSetFileSystemPath)(settings, path)
    }
    #[doc = "\n Set whether or not we should load and compile shaders from the file system\n (eg, from the /shaders/ path, relative to file_system_path).\n\n If this is false (the default), we will instead load pre-compiled shaders\n from memory which speeds up application startup time.\n"]
    pub unsafe fn ulSettingsSetLoadShadersFromFileSystem(
        &self,
        settings: ULSettings,
        enabled: bool,
    ) {
        (self.ulSettingsSetLoadShadersFromFileSystem)(settings, enabled)
    }
    #[doc = "\n We try to use the GPU renderer when a compatible GPU is detected.\n\n Set this to true to force the engine to always use the CPU renderer.\n"]
    pub unsafe fn ulSettingsSetForceCPURenderer(&self, settings: ULSettings, force_cpu: bool) {
        (self.ulSettingsSetForceCPURenderer)(settings, force_cpu)
    }
    #[doc = "\n Create the App singleton.\n\n @param  settings  Settings to customize App runtime behavior. You can pass\n                   NULL for this parameter to use default settings.\n\n @param  config  Config options for the Ultralight renderer. You can pass\n                 NULL for this parameter to use default config.\n\n @note  You should only create one of these per application lifetime.\n\n @note  Certain Config options may be overridden during App creation,\n        most commonly Config::face_winding and Config::device_scale_hint.\n"]
    pub unsafe fn ulCreateApp(&self, settings: ULSettings, config: ULConfig) -> ULApp {
        (self.ulCreateApp)(settings, config)
    }
    #[doc = "\n Destroy the App instance.\n"]
    pub unsafe fn ulDestroyApp(&self, app: ULApp) {
        (self.ulDestroyApp)(app)
    }
    #[doc = "\n Set a callback for whenever the App updates. You should update all app\n logic here.\n\n @note  This event is fired right before the run loop calls\n        Renderer::Update and Renderer::Render.\n"]
    pub unsafe fn ulAppSetUpdateCallback(
        &self,
        app: ULApp,
        callback: ULUpdateCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) {
        (self.ulAppSetUpdateCallback)(app, callback, user_data)
    }
    #[doc = "\n Whether or not the App is running.\n"]
    pub unsafe fn ulAppIsRunning(&self, app: ULApp) -> bool {
        (self.ulAppIsRunning)(app)
    }
    #[doc = "\n Get the main monitor (this is never NULL).\n\n @note  We'll add monitor enumeration later.\n"]
    pub unsafe fn ulAppGetMainMonitor(&self, app: ULApp) -> ULMonitor {
        (self.ulAppGetMainMonitor)(app)
    }
    #[doc = "\n Get the underlying Renderer instance.\n"]
    pub unsafe fn ulAppGetRenderer(&self, app: ULApp) -> ULRenderer {
        (self.ulAppGetRenderer)(app)
    }
    #[doc = "\n Run the main loop.\n"]
    pub unsafe fn ulAppRun(&self, app: ULApp) {
        (self.ulAppRun)(app)
    }
    #[doc = "\n Quit the application.\n"]
    pub unsafe fn ulAppQuit(&self, app: ULApp) {
        (self.ulAppQuit)(app)
    }
    #[doc = "\n Get the monitor's DPI scale (1.0 = 100%).\n"]
    pub unsafe fn ulMonitorGetScale(&self, monitor: ULMonitor) -> f64 {
        (self.ulMonitorGetScale)(monitor)
    }
    #[doc = "\n Get the width of the monitor (in pixels).\n"]
    pub unsafe fn ulMonitorGetWidth(&self, monitor: ULMonitor) -> ::std::os::raw::c_uint {
        (self.ulMonitorGetWidth)(monitor)
    }
    #[doc = "\n Get the height of the monitor (in pixels).\n"]
    pub unsafe fn ulMonitorGetHeight(&self, monitor: ULMonitor) -> ::std::os::raw::c_uint {
        (self.ulMonitorGetHeight)(monitor)
    }
    #[doc = "\n Create a new Window.\n\n @param  monitor       The monitor to create the Window on.\n\n @param  width         The width (in screen coordinates).\n\n @param  height        The height (in screen coordinates).\n\n @param  fullscreen    Whether or not the window is fullscreen.\n\n @param  window_flags  Various window flags.\n"]
    pub unsafe fn ulCreateWindow(
        &self,
        monitor: ULMonitor,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        fullscreen: bool,
        window_flags: ::std::os::raw::c_uint,
    ) -> ULWindow {
        (self.ulCreateWindow)(monitor, width, height, fullscreen, window_flags)
    }
    #[doc = "\n Destroy a Window.\n"]
    pub unsafe fn ulDestroyWindow(&self, window: ULWindow) {
        (self.ulDestroyWindow)(window)
    }
    #[doc = "\n Set a callback to be notified when a window closes.\n"]
    pub unsafe fn ulWindowSetCloseCallback(
        &self,
        window: ULWindow,
        callback: ULCloseCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) {
        (self.ulWindowSetCloseCallback)(window, callback, user_data)
    }
    #[doc = "\n Set a callback to be notified when a window resizes\n (parameters are passed back in pixels).\n"]
    pub unsafe fn ulWindowSetResizeCallback(
        &self,
        window: ULWindow,
        callback: ULResizeCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) {
        (self.ulWindowSetResizeCallback)(window, callback, user_data)
    }
    #[doc = "\n Get window width (in screen coordinates).\n"]
    pub unsafe fn ulWindowGetScreenWidth(&self, window: ULWindow) -> ::std::os::raw::c_uint {
        (self.ulWindowGetScreenWidth)(window)
    }
    #[doc = "\n Get window width (in pixels).\n"]
    pub unsafe fn ulWindowGetWidth(&self, window: ULWindow) -> ::std::os::raw::c_uint {
        (self.ulWindowGetWidth)(window)
    }
    #[doc = "\n Get window height (in screen coordinates).\n"]
    pub unsafe fn ulWindowGetScreenHeight(&self, window: ULWindow) -> ::std::os::raw::c_uint {
        (self.ulWindowGetScreenHeight)(window)
    }
    #[doc = "\n Get window height (in pixels).\n"]
    pub unsafe fn ulWindowGetHeight(&self, window: ULWindow) -> ::std::os::raw::c_uint {
        (self.ulWindowGetHeight)(window)
    }
    #[doc = "\n Move the window to a new position (in screen coordinates) relative to the top-left of the\n monitor area.\n"]
    pub unsafe fn ulWindowMoveTo(
        &self,
        window: ULWindow,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) {
        (self.ulWindowMoveTo)(window, x, y)
    }
    #[doc = "\n Move the window to the center of the monitor.\n"]
    pub unsafe fn ulWindowMoveToCenter(&self, arg1: ULWindow) {
        (self.ulWindowMoveToCenter)(arg1)
    }
    #[doc = "\n Get the x-position of the window (in screen coordinates) relative to the top-left of the\n monitor area.\n"]
    pub unsafe fn ulWindowGetPositionX(&self, window: ULWindow) -> ::std::os::raw::c_int {
        (self.ulWindowGetPositionX)(window)
    }
    #[doc = "\n Get the y-position of the window (in screen coordinates) relative to the top-left of the\n monitor area.\n"]
    pub unsafe fn ulWindowGetPositionY(&self, window: ULWindow) -> ::std::os::raw::c_int {
        (self.ulWindowGetPositionY)(window)
    }
    #[doc = "\n Get whether or not a window is fullscreen.\n"]
    pub unsafe fn ulWindowIsFullscreen(&self, window: ULWindow) -> bool {
        (self.ulWindowIsFullscreen)(window)
    }
    #[doc = "\n Get the DPI scale of a window.\n"]
    pub unsafe fn ulWindowGetScale(&self, window: ULWindow) -> f64 {
        (self.ulWindowGetScale)(window)
    }
    #[doc = "\n Set the window title.\n"]
    pub unsafe fn ulWindowSetTitle(&self, window: ULWindow, title: *const ::std::os::raw::c_char) {
        (self.ulWindowSetTitle)(window, title)
    }
    #[doc = "\n Set the cursor for a window.\n"]
    pub unsafe fn ulWindowSetCursor(&self, window: ULWindow, cursor: ULCursor) {
        (self.ulWindowSetCursor)(window, cursor)
    }
    #[doc = "\n Show the window (if it was previously hidden).\n"]
    pub unsafe fn ulWindowShow(&self, window: ULWindow) {
        (self.ulWindowShow)(window)
    }
    #[doc = "\n Hide the window.\n"]
    pub unsafe fn ulWindowHide(&self, window: ULWindow) {
        (self.ulWindowHide)(window)
    }
    #[doc = "\n Whether or not the window is currently visible (not hidden).\n"]
    pub unsafe fn ulWindowIsVisible(&self, window: ULWindow) -> bool {
        (self.ulWindowIsVisible)(window)
    }
    #[doc = "\n Close a window.\n"]
    pub unsafe fn ulWindowClose(&self, window: ULWindow) {
        (self.ulWindowClose)(window)
    }
    #[doc = "\n Convert screen coordinates to pixels using the current DPI scale.\n"]
    pub unsafe fn ulWindowScreenToPixels(
        &self,
        window: ULWindow,
        val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.ulWindowScreenToPixels)(window, val)
    }
    #[doc = "\n Convert pixels to screen coordinates using the current DPI scale.\n"]
    pub unsafe fn ulWindowPixelsToScreen(
        &self,
        window: ULWindow,
        val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.ulWindowPixelsToScreen)(window, val)
    }
    #[doc = "\n Get the underlying native window handle.\n\n @note This is:  - HWND on Windows\n                 - NSWindow* on macOS\n                 - GLFWwindow* on Linux\n"]
    pub unsafe fn ulWindowGetNativeHandle(&self, window: ULWindow) -> *mut ::std::os::raw::c_void {
        (self.ulWindowGetNativeHandle)(window)
    }
    #[doc = "\n Create a new Overlay.\n\n @param  window  The window to create the Overlay in.\n\n @param  width   The width in pixels.\n\n @param  height  The height in pixels.\n\n @param  x       The x-position (offset from the left of the Window), in\n                 pixels.\n\n @param  y       The y-position (offset from the top of the Window), in\n                 pixels.\n\n @note  Each Overlay is essentially a View and an on-screen quad. You should\n        create the Overlay then load content into the underlying View.\n"]
    pub unsafe fn ulCreateOverlay(
        &self,
        window: ULWindow,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> ULOverlay {
        (self.ulCreateOverlay)(window, width, height, x, y)
    }
    #[doc = "\n Create a new Overlay, wrapping an existing View.\n\n @param  window  The window to create the Overlay in. (we currently only\n                 support one window per application)\n\n @param  view    The View to wrap (will use its width and height).\n\n @param  x       The x-position (offset from the left of the Window), in\n                 pixels.\n\n @param  y       The y-position (offset from the top of the Window), in\n                 pixels.\n\n @note  Each Overlay is essentially a View and an on-screen quad. You should\n        create the Overlay then load content into the underlying View.\n"]
    pub unsafe fn ulCreateOverlayWithView(
        &self,
        window: ULWindow,
        view: ULView,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> ULOverlay {
        (self.ulCreateOverlayWithView)(window, view, x, y)
    }
    #[doc = "\n Destroy an overlay.\n"]
    pub unsafe fn ulDestroyOverlay(&self, overlay: ULOverlay) {
        (self.ulDestroyOverlay)(overlay)
    }
    #[doc = "\n Get the underlying View.\n"]
    pub unsafe fn ulOverlayGetView(&self, overlay: ULOverlay) -> ULView {
        (self.ulOverlayGetView)(overlay)
    }
    #[doc = "\n Get the width (in pixels).\n"]
    pub unsafe fn ulOverlayGetWidth(&self, overlay: ULOverlay) -> ::std::os::raw::c_uint {
        (self.ulOverlayGetWidth)(overlay)
    }
    #[doc = "\n Get the height (in pixels).\n"]
    pub unsafe fn ulOverlayGetHeight(&self, overlay: ULOverlay) -> ::std::os::raw::c_uint {
        (self.ulOverlayGetHeight)(overlay)
    }
    #[doc = "\n Get the x-position (offset from the left of the Window), in pixels.\n"]
    pub unsafe fn ulOverlayGetX(&self, overlay: ULOverlay) -> ::std::os::raw::c_int {
        (self.ulOverlayGetX)(overlay)
    }
    #[doc = "\n Get the y-position (offset from the top of the Window), in pixels.\n"]
    pub unsafe fn ulOverlayGetY(&self, overlay: ULOverlay) -> ::std::os::raw::c_int {
        (self.ulOverlayGetY)(overlay)
    }
    #[doc = "\n Move the overlay to a new position (in pixels).\n"]
    pub unsafe fn ulOverlayMoveTo(
        &self,
        overlay: ULOverlay,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) {
        (self.ulOverlayMoveTo)(overlay, x, y)
    }
    #[doc = "\n Resize the overlay (and underlying View), dimensions should be\n specified in pixels.\n"]
    pub unsafe fn ulOverlayResize(
        &self,
        overlay: ULOverlay,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    ) {
        (self.ulOverlayResize)(overlay, width, height)
    }
    #[doc = "\n Whether or not the overlay is hidden (not drawn).\n"]
    pub unsafe fn ulOverlayIsHidden(&self, overlay: ULOverlay) -> bool {
        (self.ulOverlayIsHidden)(overlay)
    }
    #[doc = "\n Hide the overlay (will no longer be drawn).\n"]
    pub unsafe fn ulOverlayHide(&self, overlay: ULOverlay) {
        (self.ulOverlayHide)(overlay)
    }
    #[doc = "\n Show the overlay.\n"]
    pub unsafe fn ulOverlayShow(&self, overlay: ULOverlay) {
        (self.ulOverlayShow)(overlay)
    }
    #[doc = "\n Whether or not an overlay has keyboard focus.\n"]
    pub unsafe fn ulOverlayHasFocus(&self, overlay: ULOverlay) -> bool {
        (self.ulOverlayHasFocus)(overlay)
    }
    #[doc = "\n Grant this overlay exclusive keyboard focus.\n"]
    pub unsafe fn ulOverlayFocus(&self, overlay: ULOverlay) {
        (self.ulOverlayFocus)(overlay)
    }
    #[doc = "\n Remove keyboard focus.\n"]
    pub unsafe fn ulOverlayUnfocus(&self, overlay: ULOverlay) {
        (self.ulOverlayUnfocus)(overlay)
    }
    #[doc = "\n This is only needed if you are not calling ulCreateApp().\n\n Initializes the platform font loader and sets it as the current FontLoader.\n"]
    pub unsafe fn ulEnablePlatformFontLoader(&self) {
        (self.ulEnablePlatformFontLoader)()
    }
    #[doc = "\n This is only needed if you are not calling ulCreateApp().\n\n Initializes the platform file system (needed for loading file:/// URLs) and\n sets it as the current FileSystem.\n\n You can specify a base directory path to resolve relative paths against.\n"]
    pub unsafe fn ulEnablePlatformFileSystem(&self, base_dir: ULString) {
        (self.ulEnablePlatformFileSystem)(base_dir)
    }
    #[doc = "\n This is only needed if you are not calling ulCreateApp().\n\n Initializes the default logger (writes the log to a file).\n\n You should specify a writable log path to write the log to\n for example \"./ultralight.log\".\n"]
    pub unsafe fn ulEnableDefaultLogger(&self, log_path: ULString) {
        (self.ulEnableDefaultLogger)(log_path)
    }
}
